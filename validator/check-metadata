#!/usr/bin/env node

// See: ./README.md for usage

require = require('esm-wallaby')(module)

const Fs = require('fs')
const Os = require('os')
const Path = require('path')
const Util = require('util')

const Yaml = require('js-yaml')

const {log: println} = console
const [readdir, readFile, stat] = [Fs.readdir, Fs.readFile, Fs.stat].map(Util.promisify)

class SchemaError extends Error {
  constructor(...params) {
    super(...params)

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, SchemaError)
    }

    this.name = 'SchemaError'
  }
}

function isPlainObject(input) {
  return input && !Array.isArray(input) && typeof input === 'object'
}

function isCorrectType(input, type) {
  if (type === 'array') {
    return Array.isArray(input)
  }

  if (type === 'object') {
    return isPlainObject(input)
  }

  return typeof input === type
}

function checkParameterType(parameter, expectedType, path, optional) {
  if (optional && !parameter) {
    return
  }

  if (!isCorrectType(parameter, expectedType)) {
    throw new SchemaError(`${path.join('.')} must be of the type: ${expectedType}`)
  }
}

const ParameterTypes = {
  NUMBER: 'number',
  OBJECT: 'object',
  SET_OF_NUMBERS: 'set_of_numbers',
  SET_OF_STRINGS: 'set_of_strings',
  STRING: 'string'
}

const parameterTypes = [ParameterTypes.STRING, ParameterTypes.SET_OF_STRINGS, ParameterTypes.NUMBER, ParameterTypes.SET_OF_NUMBERS, ParameterTypes.OBJECT]
function checkParameters(parameters) {
  const path = ['schema', 'parameters']

  checkParameterType(parameters, 'array', path)

  for (let i = 0; i < parameters.length; i++) {
    path.push(i)
    const parameter = parameters[i]

    checkParameterType(parameter, 'object', path)

    if (!parameterTypes.includes(parameter.type)) {
      throw new SchemaError(`${path.join('.')}.type is not a valid type`)
    }

    checkParameterType(parameter, 'object', path)
    checkParameterType(parameter.name, 'string', [...path, 'name'])
    checkParameterType(parameter.label, 'string', [...path, 'label'], true)
    checkParameterType(parameter.required, 'boolean', [...path, 'required'], true)
    checkParameterType(parameter.placeholder, 'string', [...path, 'placeholder'], true)

    if (parameter.type === ParameterTypes.STRING) {
      checkParameterType(parameter.default, 'string', [...path, 'default'], true)

      const items = parameter.items
      path.push('items')
      if (items && !(Array.isArray(items) || isPlainObject(items))) {
        throw new SchemaError(`${path.join('.')} should be an array or object`)
      }

      if (Array.isArray(items)) {
        for (let i = 0; i < items.length; i++) {
          path.push(i)
          checkParameterType(items[i], 'string', path)
          path.pop()
        }
      }

      if (isPlainObject(items)) {
        const query = items.query

        checkParameterType(items.query, 'string', [...path, 'query'])

        if ((!!items.datasource + !!items.library + !!items.package) !== 1) {
          throw new SchemaError(`${path} datasource, library and package are mutually exclusive`)
        }

        checkParameterType(items.datasource, 'string', [...path, 'datasource'], true)
        checkParameterType(items.library, 'string', [...path, 'library'], true)
        checkParameterType(items.package, 'string', [...path, 'package'], true)
      }

      path.pop()
    }

    if (parameter.type === ParameterTypes.SET_OF_STRINGS) {
      checkParameterType(parameter.default, 'array', [...path, 'default'], true)

      if (parameter.default && !parameter.default.every((v) => typeof v === 'string')) {
        throw new SchemaError(`${path.join('.')} should have string values`)
      }

      path.push('items')
      const items = parameter.items
      if (items && !(Array.isArray(items) || isPlainObject(items))) {
        throw new SchemaError(`${path.join('.')}.items should be an array or object`)
      }

      if (Array.isArray(items)) {
        for (let i = 0; i < items.length; i++) {
          path.push(i)
          checkParameterType(items[i], 'string', path)
          path.pop()
        }
      }

      if (isPlainObject(items)) {
        const query = items.query
        if (typeof query !== 'string') {
          throw new SchemaError(`parameter set_of_strings's items object's query in parameters should be a string`)
        }

        if ((!!items.datasource + !!items.library + !!items.package) !== 1) {
          throw new SchemaError(`${path.join('.')} datasource, library and package are mutually exclusive`)
        }

        checkParameterType(items.datasource, 'string', [...path, 'datasource'], true)
        checkParameterType(items.library, 'string', [...path, 'library'], true)
        checkParameterType(items.package, 'string', [...path, 'package'], true)
      }
      path.pop()
    }

    if (parameter.type === ParameterTypes.NUMBER) {
      checkParameterType(parameter.default, 'number', [...path, 'default'], true)
    }

    if (parameter.type === ParameterTypes.OBJECT) {
      checkParameterType(parameter.default, 'object', [...path, 'default'], true)
      checkParameterType(parameter.key, 'object', [...path, 'key'], true)

      if (parameter.key) {
        checkParameterType(parameter.key.placeholder, 'string', [...path, 'key', 'placeholder'])
      }

      checkParameterType(parameter.value, 'object', [...path, 'value'])
      checkParameterType(parameter.value.placeholder, 'string', [...path, 'value', 'placeholder'], true)

      const valueTypes = [ParameterTypes.STRING, ParameterTypes.SET_OF_STRINGS, ParameterTypes.SET_OF_NUMBERS]
      if (!valueTypes.includes(parameter.value.type)) {
        throw new SchemaError(`${path.join('.')}.value.type unknown parameter type`)
      }

      if (parameter.default && parameter.value.type === ParameterTypes.STRING) {
        path.push('default')
        const values = Object.values(parameter.default)

        for (let i = 0; i < values.length; i++) {
          path.push(i)
          checkParameterType(values[i], 'string', path)
          path.pop()
        }

        path.pop()
      }

      if (parameter.default && parameter.value.type === ParameterTypes.SET_OF_STRINGS) {
        path.push('default')
        const values = Object.values(parameter.default)
        for (let i = 0; i < values.length; i++) {
          path.push(i)
          const value = values[i]
          checkParameterType(value, 'array', path)

          if (!value.every((v) => typeof v === 'string')) {
            throw new SchemaError(`${path.join('.')} should have string values`)
          }
          path.pop()
        }
        path.pop()
      }

      if (parameter.default && parameter.value.type === ParameterTypes.SET_OF_NUMBERS) {
        path.push('default')

        const values = Object.values(parameter.default)
        for (let i = 0; i < values.length; i++) {
          path.push(i)
          const value = values[i]

          checkParameterType(value, 'array', path)

          if (!value.every((v) => typeof v === 'number')) {
            throw new SchemaError(`${path.join('.')} should have number values`)
          }
          path.pop()
        }
        path.pop()
      }
    }

    path.pop()
  }
}

function checkPolicy(policy) {
  if (!isPlainObject(policy)) {
    throw new SchemaError('policy must be of the type: object')
  }

  if (!isPlainObject(policy.rule)) {
    throw new SchemaError('policy.rule must be of the type: object')
  }

  if (typeof policy.rule.type !== 'string') {
    throw new SchemaError('policy.rule.type must be of the type: string')
  }

  if (policy.rule.type !== 'rego') {
    throw new SchemaError(`policy.rule.type unknown rule type`)
  }

  if (typeof policy.rule.value !== 'string') {
    throw new SchemaError('policy.rule.value must be of the type: string')
  }
}

const decisionTypes = ['toggle', 'rego', 'string']
function checkDecision(decision) {
  const path = ['decision']
  checkParameterType(decision, 'array', path)

  for (let i = 0; i < decision.length; i++) {
    path.push(i)
    const entry = decision[i]

    checkParameterType(entry, 'object', path)

    if (!decisionTypes.includes(entry.type)) {
      throw new SchemaError(`${path}.type unknown type`)
    }

    if (entry.type === 'rego' || entry.type === 'string') {
      checkParameterType(entry.key, 'string', [...path, 'key'])
      checkParameterType(entry.value, 'string', [...path, 'value'])
    }

    if (entry.type === 'toggle') {
      checkParameterType(entry.label, 'string', [...path, 'label'])

      const toggles = entry.toggles
      path.push('toggles')

      checkParameterType(toggles, 'array', path)

      for (let i = 0; i < toggles.length; i++) {
        path.push(i)
        checkParameterType(toggles[i], 'object', path)
        checkParameterType(toggles[i].key, 'string', [...path, 'key'])
        checkParameterType(toggles[i].value, 'boolean', [...path, 'value'])
        path.pop()
      }

      path.pop()
    }

    path.pop()
  }
}

function checkMetadata(yaml, outcome) {
  const metadata = Yaml.load(yaml)
  // console.log(metadata)
  const {title, description, policy, schema} = metadata

  try {
    if (typeof title !== 'string' || typeof description !== 'string') {
      throw new SchemaError('title and description of the snippet must be strings')
    }

    const decision = schema?.decision
    if (decision) {
      checkDecision(decision)
    }

    if (policy) {
      checkPolicy(policy)
    }

    const parameters = schema?.parameters
    if (parameters) {
      checkParameters(parameters)
    }

    println(`✅ pass ${truncate(outcome.filename)}:${outcome.location.line}`)
  } catch (error) {
    if (error instanceof SchemaError) {
      println(`❌ Failed ${truncate(outcome.filename)}:${outcome.location.line}`)
      outcome.errors.push(error)
    } else {
      throw error
    }
  }
}

function checkFile(filename, rego, outcomes) {
  const comments = rego.split('\n').reduce((prev, curr, i) => {
    if (curr.trim().startsWith('#')) {
      prev.push({value: curr.trim().replace('#', ''), location: {start: {line: i+1}, end: {line: i+1}}})
    }

    return prev
  }, [])

  for (let i = 0, n = comments.length; i < n; ++i) {
    const head = comments[i]
    let end = head.location.end
    let yaml = ''

    try {
      if (/^ METADATA: library-snippet/.test(head.value)) {
        for (++i; i < n; ++i) {
          const {location, value} = comments[i]

          if (location.start.line - end.line === 1) {
            // We’re still in the same block of comments that started with
            // 'METADATA: library-snippet'.
            end = location.end
            yaml += `${value.replace(/^ (.*)/, '$1')}${Os.EOL}`
          } else {
            --i; break
          }
        }

        const outcome = {errors: [], filename, location: head.location.start, yaml}
        // console.log(yaml)
        checkMetadata(yaml, outcome, outcomes)
        outcomes.push(outcome)
      }
    } catch (error) {
      println(`❌ fail ${truncate(filename)}:${head.location.start.line}`)
      outcomes.push({errors: [error], filename, location: head.location.start, yaml})
    }
  }
}

function checkFiles(pathname, callback, outcomes = [], pending = new Set()) {
  stat(pathname).then((stats) => {
    if (stats.isDirectory()) {
      pending.add(pathname)

      readdir(pathname).then((items) => {
        pending.delete(pathname)

        items.forEach((item) => {
          checkFiles(Path.join(pathname, item), callback, outcomes, pending)
        })
      })
    } else if (stats.isFile() && Path.basename(pathname) !== Path.basename(pathname, '.rego')) {
      pending.add(pathname)

      readFile(pathname, {encoding: 'utf-8'}).then((rego) => {
        pending.delete(pathname)
        checkFile(pathname, rego, outcomes)

        if (pending.size === 0) {
          callback(outcomes)
        }
      })
    } else if (pending.size === 0) {
      callback(outcomes)
    }
  }).catch((error) => {
    pending.delete(pathname)

    println(`❌ fail ${truncate(pathname)}`)
    outcomes.push({errors: [error], filename: pathname})
  })
}

function truncate(pathname) {
  if (libdir) {
    return pathname.replace(new RegExp(`^${libdir}`), '...')
  }

  return pathname
}

let libdir = ''

if (Fs.realpathSync(process.argv[1]) === __filename) {
  // Executed as script.
  libdir = process.argv[2]

  checkFiles(libdir, (outcomes) => {
    outcomes.sort((a, b) => {
      return a.filename === b.filename
        ? a.location.line - b.location.line
        : a.filename < b.filename ? -1 : 1
    })

    let nFails = 0

    outcomes.forEach(({errors, filename, location, yaml}) => {
      if (errors.length > 0) {
        println(`❌ fail ${truncate(filename)}${location ? `:${location.line}` : ''}`)

        errors.forEach((error) => {
          println(`--> ${error.message}`)
        })

        if (yaml) {
          println(`    ${yaml.split(Os.EOL).join(`${Os.EOL}    `)}`)
        }

        nFails += errors.length
      }
    })

    process.exit(nFails)
  })
}
